power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut_cutDay)
tail(power_consum_df_long_cut_cutDay, 24)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(ggcorrplot) # Easy cross-corrleation plots
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = ymd_hms(STARTTID, tz = "UTC"))
summary(power_consum_df)
head(power_consum_df)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut_cutDay)
tail(power_consum_df_long_cut_cutDay, 24)
power_consum_sum_df <- power_consum_df_long_cut_cutDay %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID) %>%
summarise_each(funs(sum))
head(power_consum_sum_df)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(ggcorrplot) # Easy cross-corrleation plots
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = ymd_hms(STARTTID, tz = "UTC"))
summary(power_consum_df)
head(power_consum_df)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut_cutDay)
tail(power_consum_df_long_cut_cutDay, 24)
power_consum_sum_df <- power_consum_df_long_cut_cutDay %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID) %>%
summarise_each(funs(sum))
head(power_consum_sum_df)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(ggcorrplot) # Easy cross-corrleation plots
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
library(readxl)
file_path <- "data"
excel_files <- list.files(path = file_path, pattern = "*.xlsx", full.names = TRUE)
excel_files
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows()
summary(metro_aas_data)
head(metro_aas_data)
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB"))
summary(metro_aas_data)
head(metro_aas_data)
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB"))
tsibble::fill_gaps(.full = TRUE)
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
tsibble::fill_gaps(.full = TRUE)
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB"))
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_data)
head(metro_aas_data)
metro_aas_data <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB"))
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_data)
head(metro_aas_data)
max(metro_aas_data$DATO)
metro_aas_df_c <- metro_aas_df
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB"))
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df_c <- metro_aas_df
ggplot_na_distribution2(metro_aas_df_c$LT)
ggplot_na_distribution2(metro_aas_df_c$GLOB)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATA = as.Date(DATO))
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATA = as.Date(DATO)) %>%
group_by(DATA)
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO))
#tsibble::fill_gaps(.full = TRUE)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
unique()
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
data_range <- seq(min(metro_aas_df$DATO), max(max(metro_aas_df$DATO)), by = "1 day")
data_range <- seq(min(metro_aas_df$DATO), max(max(metro_aas_df$DATO)), by = "1 day")
data_range
data_range <- seq(min(metro_aas_df$DATO), max(max(metro_aas_df$DATO)), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
complete(DATO = seq(min(dATO), max(DATO), by = 'hour'))
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
complete(DATO = seq(min(DATO), max(DATO), by = 'hour'))
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
complete(DATO = seq(min(metro_aas_data$DATO), max(metro_aas_data$DATO), by = 'hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
complete(DATO = seq(min(metro_aas_data$DATO), max(metro_aas_data$DATO), by = '1 hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(metro_aas_data$DATO), max(metro_aas_data$DATO), by = '1 hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(DATO), max(DATO), by = '1 hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = data_range)
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(DATO), max(DATO), by = '1 day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(metro_aas_data$DATO), max(metro_aas_data$DATO), by = '1 day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
#group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(metro_aas_data$DATO), max(metro_aas_data$DATO), by = '1 day'))
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
metro_aas_df_gaps <- metro_aas_df %>%
complete(datetime = seq(min(datetime), max(datetime), by = 'hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
metro_aas_df_gaps <- metro_aas_df %>%
complete(datetime = seq(min(datetime), max(datetime), by = 'hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
metro_aas_df_gaps <- metro_aas_df %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'hour'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE)
metro_aas_df_gaps <- metro_aas_df %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) #%>%
#complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
complete(DATO = seq(ydm(min(DATO)), ydm(max(DATO)), by = 'day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) #%>%
#complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
metro_aas_df_gaps <- metro_aas_df %>%
complete(DATO = seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = 'day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
#distinct(DATO, .keep_all = TRUE) #%>%
#complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
metro_aas_df_gaps <- metro_aas_df %>%
complete(DATO = seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = 'day'))
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
ungroup() %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
metro_aas_df_gaps <- metro_aas_df %>%
complete(DATO = seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = 'day'))
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
ungroup() %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'day'))
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df_c <- metro_aas_df
ggplot_na_distribution2(metro_aas_df_c$LT)
ggplot_na_distribution(metro_aas_df_c$LT)
ggplot_na_distribution(metro_aas_df_c$GLOB)
data_range <- seq(min(metro_aas_df$DATO), max(metro_aas_df$DATO), by = "1 day")
metro_aas_df <- excel_files %>%
lapply(read_excel) %>%
bind_rows() %>%
dplyr::select(c("DATO","LT", "GLOB")) %>%
mutate(DATO = as.Date(DATO)) %>%
group_by(DATO) %>%
distinct(DATO, .keep_all = TRUE) %>%
ungroup() %>%
complete(DATO = seq(min(DATO), max(DATO), by = 'day')) # Add missing days
summary(metro_aas_df)
head(metro_aas_df)
max(metro_aas_df$DATO)
metro_aas_df_c <- metro_aas_df
ggplot_na_distribution(metro_aas_df_c$LT)
metro_aas_df_imputed <- imputeTS::na_ma(metro_aas_df_c , k = 4, weighting = "simple")
autoplot(metro_aas_df_imputed$LT)
metro_aas_df_imputed %>%
ggplot(aes(DATE, LT)) +
geom_line()
metro_aas_df_imputed %>%
ggplot(aes(DATO, LT)) +
geom_line()
metro_aas_df_imputed %>%
ggplot(aes(DATO, GLOB)) +
geom_line()
power_consum_df_c <- power_consum_sum_df
power_consum_dateRange <- c(min(power_consum_df_c$STARTTID), max(power_consum_df_c$STARTTID))
metro_ass_dateRange <- c(min(metro_aas_df_c$DATO), max(metro_aas_df_c$DATO))
power_consum_dateRange
metro_ass_dateRange
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c)
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c, by = join_by(DATO == STARTTID))
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c, by = join_by(STARTTID == DATO))
head(merged_df)
merged_df_noLeap <- merged_df %>%
dplyr::filter(!(month(Date) == 2 & day(Date) == 29))
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c, by = join_by(STARTTID == DATO)) %>%
mutate(DATO = STARTTID)
head(merged_df)
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c, by = join_by(STARTTID == DATO))
head(merged_df)
merged_df <- dplyr::inner_join(power_consum_df_c, metro_aas_df_c, by = join_by(STARTTID == DATO)) %>%
rename(DATO = STARTTID)
head(merged_df)
merged_df_noLeap <- merged_df %>%
dplyr::filter(!(month(DATO) == 2 & day(DATO) == 29))
merged_df_noLeap <- merged_df %>%
dplyr::filter(!(month(DATO) == 2 & day(DATO) == 29))
head(merged_df)
