# Perform the Granger Causality test for Consumption vs Temperature
granger_result <- granger_test(ts_consumption, ts_temp, group, "Temperature (LT)")
# Extract Global Irradiation (GLOB) data
ts_glob <- ts(na.remove(merged_data$GLOB), frequency = 365)
# Perform the Granger Causality test for Consumption vs Global Irradiation
granger_result <- granger_test(ts_consumption, ts_glob, group, "Global Irradiation (GLOB)")
# Perform the Granger Causality test for Temperature vs Global Irradiation
granger_result <- granger_test(ts_temp, ts_glob, group, "Temperature (LT)")
# Extract the consumption data for the specific group (e.g., 'Privat')
consumer_groups <- c("Privat", "Forretning", "Industri")
for (group in consumer_groups) {
consumption_data <- merged_data$[[group]]
# Extract the consumption data for the specific group (e.g., 'Privat')
consumer_groups <- c("Privat", "Forretning", "Industri")
for (group in consumer_groups) {
consumption_data <- merged_data[, group]
ts_consumption <- ts(na.remove(consumption_data), frequency = 365)  # Convert to time series with daily frequency
# Extract temperature (LT) data, assuming it is available in merged_data
ts_temp <- ts(na.remove(merged_data$LT), frequency = 365)  # Convert to time series with daily frequency
# Perform the Granger Causality test for Consumption vs Temperature
granger_result <- granger_test(ts_consumption, ts_temp, group, "Temperature (LT)")
# Extract Global Irradiation (GLOB) data
ts_glob <- ts(na.remove(merged_data$GLOB), frequency = 365)
# Perform the Granger Causality test for Consumption vs Global Irradiation
granger_result <- granger_test(ts_consumption, ts_glob, group, "Global Irradiation (GLOB)")
# Perform the Granger Causality test for Temperature vs Global Irradiation
granger_result <- granger_test(ts_temp, ts_glob, group, "Temperature (LT)")
}
arima_forecast <- function(time_series, max_order = 5, h = 10) {
# Ensure the time series is a univariate time series (vector)
if (is.null(time_series) || length(time_series) < 2) {
stop("Time series is too short for forecasting")
}
# Check for missing data and handle it
time_series <- na.remove(time_series)  # Remove NA values from the series
# Fit an ARIMA model with automatic order selection
# auto.arima function automatically selects the best ARIMA model based on AICc criterion
model <- auto.arima(time_series, max.p = max_order, max.q = max_order, seasonal = FALSE)
# Display the selected ARIMA model
print(paste("Fitted ARIMA Model:", as.character(model)))
# Forecast the next 'h' periods (e.g., 10 days)
forecast_result <- forecast(model, h = h)
# Plot the forecasted values along with the historical data
plot(forecast_result)
title(main = paste("ARIMA Forecast for next", h, "periods"))
# Return the forecast results (point forecast, lower and upper prediction intervals)
return(forecast_result)
}
# Let's forecast the consumption for the 'Privat' group over the next 10 periods
# Extract consumption data for the 'Privat' group from the merged dataset
consumption_data <- merged_data$Privat
# Convert consumption data to a time series object, handling NAs
ts_consumption <- ts(na.remove(consumption_data), frequency = 365)  # Daily frequency (365 days per year)
# Apply ARIMA model forecasting for the next 10 periods (e.g., days or time units)
forecast_result <- arima_forecast(ts_consumption, max_order = 5, h = 10)
# Now, let's forecast the temperature (LT) for the next 10 periods
# Extract temperature data from merged dataset
temperature_data <- merged_data$LT
# Convert temperature data to a time series object
ts_temperature <- ts(na.remove(temperature_data), frequency = 365)
# Apply ARIMA model forecasting for the next 10 periods (e.g., days or time units)
forecast_result_temp <- arima_forecast(ts_temperature, max_order = 5, h = 10)
# Similarly, forecast Global Irradiation (GLOB) for the next 10 periods
# Extract global irradiation data from merged dataset
glob_data <- merged_data$GLOB
# Convert global irradiation data to a time series object
ts_glob <- ts(na.remove(glob_data), frequency = 365)
# Apply ARIMA model forecasting for the next 10 periods (e.g., days or time units)
forecast_result_glob <- arima_forecast(ts_glob, max_order = 5, h = 10)
# Evaluation function to calculate forecast accuracy
evaluate_forecast_accuracy <- function(forecast_result, actual_data) {
# Ensure that both forecast and actual data are provided and have the same length
if (length(forecast_result$mean) != length(actual_data)) {
stop("The forecast and actual data must have the same length")
}
# Calculate accuracy measures: MAE, MSE, RMSE, MAPE, etc.
accuracy_measures <- accuracy(forecast_result, actual_data)
# Print out the accuracy measures
print("Accuracy Measures:")
print(accuracy_measures)
# Return the accuracy measures for further use
return(accuracy_measures)
}
# Get the actual temperature data for the last 10 periods
actual_temperature <- merged_data$LT[(length(merged_data$LT)-9):length(merged_data$LT)]
# Compare with the forecasted temperature
# Use the forecasted result from Task H
forecast_accuracy_temperature <- evaluate_forecast_accuracy(forecast_result_temp, actual_temperature)
# Get the actual global irradiation data for the last 10 periods
actual_glob <- merged_data$GLOB[(length(merged_data$GLOB)-9):length(merged_data$GLOB)]
# Compare with the forecasted global irradiation
# Use the forecasted result from Task H
forecast_accuracy_glob <- evaluate_forecast_accuracy(forecast_result_glob, actual_glob)
# Get the actual consumption data for the last 10 periods
# Assuming that actual future consumption data is available for comparison
actual_consumption <- merged_data$Privat[(length(merged_data$Privat)-9):length(merged_data$Privat)]
# Compare with the forecasted consumption
# Use the forecasted result from Task H
forecast_accuracy_consumption <- evaluate_forecast_accuracy(forecast_result, actual_consumption)
ts_data <- ts(na.remove(merged_data$Privat), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
# Error: Singular matrix in qr_solve
#pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
# Similar structure for Temperature and Global Irradiation...
ts_data <- ts(na.remove(merged_data$Privat), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
# Similar structure for Temperature and Global Irradiation...
diff_consumption <- diff(ts_data, lag = 365)
acf(diff_consumption, lag.max = 14, main = paste("ACF:(Seasonally Differenced, Short Term)"))
pacf(diff_consumption, lag.max = 14, main = paste("PACF:(Seasonally Differenced, Short Term)"))
# Repeat for Temperature and Global Irradiation...
ts_consumption <- ts(na.remove(merged_data$Forretning), frequency = 365)
stl_consumption <- stlplus(ts_consumption, period = 365, s.window = "periodic", t.window = 365, l.window = 30, robust = TRUE)
plot(stl_consumption)
# Remove seasonal component
autoplot(ts_consumption - stl_consumption$data[, "seasonal"])
# Repeat for Temperature and Global Irradiation...
#cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
#print(cor_matrix)
melt(merged_data) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
knitr::opts_knit$set(root.dir = 'data')
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
library(readr)
library(lubridate)
library(readxl)
library(imputeTS) # For time series imputation
library(zoo) # for time series manipulation
library(tseries)  # For stationarity tests
library(forecast) # For ARIMA modeling and forecasting
library(stlplus) # An enhanced version of STL
library(lmtest) # For Granger test
library(reshape2) # For melt an correlation matrix
#cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
#print(cor_matrix)
melt(merged_data) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
print(melt(merged_data))
print(melt(merged_data[, -c("DATO")]))
print(melt(merged_data[, -"DATO"]))
print(melt(merged_data[, -DATO]))
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
autoplot(cor_matrix)
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
corrplot(cor_matrix)
print(melt(merged_data))
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix, value.name = "Correlation") %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2()
cor_long <- melt(cor_matrix, varnames = c("Var1", "Var2"), value.name = "Correlation")
ggplot(cor_long, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Matrix", x = "", y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2() +
theme_minimal()
cor_long <- melt(cor_matrix, varnames = c("Var1", "Var2"), value.name = "Correlation")
ggplot(cor_long, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Matrix", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2() +
labs(title = "Correlation Matrix", x = "", y = "") +
theme_minimal()
cor_long <- melt(cor_matrix, varnames = c("Var1", "Var2"), value.name = "Correlation")
ggplot(cor_long, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Correlation Matrix", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
cor_matrix <- cor(merged_data %>% select(where(is.numeric)), use = "pairwise.complete.obs")
print(cor_matrix)
melt(cor_matrix) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3))) +
scale_fill_gradient2() +
labs(title = "Correlation Matrix", x = "", y = "") +
theme_minimal()
numeric_cols <- names(merged_data)[sapply(merged_data, is.numeric) & names(merged_data) != "DATO"]
for (i in 1:(length(numeric_cols) - 1)) {
for (j in (i + 1):length(numeric_cols)) {
ts1 <- ts(merged_data[[numeric_cols[i]]], frequency = 365)
ts2 <- ts(merged_data[[numeric_cols[j]]], frequency = 365)
ccf_result <- ccf(ts1, ts2, lag.max = 30, na.action = na.contiguous,
main = paste("Cross-Correlation:", numeric_cols[i], "vs.", numeric_cols[j]))
plot(ccf_result)
}
}
ts_data <- ts(na.remove(merged_data$LT), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
# Similar structure for Temperature and Global Irradiation...
ts_data <- ts(na.remove(merged_data$GLOB), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
acf_pacf_plot <- function(data) {
ts_data <- ts(na.remove(data), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
}
acf_pacf_plot(merged_data$Forretning)
acf_pacf_plot <- function(data) {
ts_data <- ts(na.remove(data), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
}
acf_pacf_plot(merged_data$Forretning)
acf_pacf_plot(merged_data$Industri)
acf_pacf_plot(merged_data$Privat)
acf_pacf_plot(merged_data$LT)
acf_pacf_plot(merged_data$GLOB)
acf_pacf_plot <- function(data) {
ts_data <- ts(na.remove(data), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF:", deparse(substitute(data)) ,"(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:(Long Term)"))
}
acf_pacf_plot(merged_data$Forretning)
acf_pacf_plot(merged_data$Industri)
acf_pacf_plot(merged_data$Privat)
acf_pacf_plot(merged_data$LT)
acf_pacf_plot(merged_data$GLOB)
acf_pacf_plot <- function(data) {
ts_data <- ts(na.remove(data), frequency = 365)
acf(ts_data, lag.max = 14, main = paste("ACF:", deparse(substitute(data)) ,"(Short Term)"))
pacf(ts_data, lag.max = 14, main = paste("PACF:", deparse(substitute(data)) ,"(Short Term)"))
acf(ts_data, lag.max = 365*2, main = paste("ACF:", deparse(substitute(data)) ,"(Long Term)"))
pacf(ts_data, lag.max = 365*2, main = paste("PACF:", deparse(substitute(data)) ,"(Long Term)"))
}
acf_pacf_plot(merged_data$Forretning)
acf_pacf_plot(merged_data$Industri)
acf_pacf_plot(merged_data$Privat)
acf_pacf_plot(merged_data$LT)
acf_pacf_plot(merged_data$GLOB)
# --- Private Electricity Consumption ---
consumption_data <- merged_data$Privat
ts_consumption <- ts(na.remove(consumption_data), frequency = 365)
# Perform STL decomposition
stl_consumption <- stlplus(ts_consumption, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Choose STL parameters
stl_parameters <- list(s.window = "periodic",  # Seasonal window for yearly data
t.window = 365,         # Trend window (yearly smoothing)
l.window = 30,          # Low-frequency window (adjust as needed)
robust = TRUE)         # Use robust STL (handles outliers better)
ma_order <- 7 # Set the order for the moving average smoother (e.g., 7 for weekly smoothing).  You can adjust this based on the data. A larger order leads to more smoothing.
# --- Private Electricity Consumption ---
consumption_data <- merged_data$Privat
ts_consumption <- ts(na.remove(consumption_data), frequency = 365)
# Perform STL decomposition
stl_consumption <- stlplus(ts_consumption, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (AFTER STL) using a moving average
smoothed_trendcycle <- ma(stl_consumption$data[, "trend"], order = ma_order) # Using moving average.
# Extract components
seasonal_consumption <- stl_consumption$data[, "seasonal"] # Seasonal component (periodic fluctuations)
remainder_consumption <- stl_consumption$data[, "remainder"]  # Remainder component (noise or error)
trendcycle_consumption <- stl_consumption$data[, "trend"]
if ("cycle" %in% colnames(stl_consumption$data)) {
trendcycle_consumption <- trendcycle_consumption + stl_consumption$data[, "cycle"]
}
deseasoned_consumption <- ts_consumption - seasonal_consumption  # Deseasonalized data
# Plot components
plot(ts_consumption, main = "Private Electricity Consumption") # Original
plot(seasonal_consumption, main = "Seasonal Component")      # Seasonal
plot(deseasoned_consumption, main = "Deseasoned Consumption")  # Deseasoned
plot(smoothed_trendcycle, main = "Smoothed Trend-Cycle")    # Smoothed trend-cycle
plot(remainder_consumption, main = "Remainder")           # Remainder
# --- Global Irradiation ---
ts_glob <- ts(na.remove(merged_data$GLOB), frequency = 365)
# Perform STL Decomposition
stl_glob <- stlplus(ts_glob, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (using moving average, same order)
smoothed_trendcycle_glob <- ma(stl_glob$data[, "trend"], order = ma_order)
# Extract components (same approach as consumption)
seasonal_glob <- stl_glob$data[, "seasonal"]
deseasoned_glob <- ts_glob - seasonal_glob
trendcycle_glob <- stl_glob$data[, "trend"]
if ("cycle" %in% colnames(stl_glob$data)) {
trendcycle_glob <- trendcycle_glob + stl_glob$data[, "cycle"]
}
remainder_glob <- stl_glob$data[, "remainder"]
#Plot components
plot(ts_glob, main = "Global Irradiation")
plot(seasonal_glob, main = "Seasonal Component")
plot(deseasoned_glob, main = "Deseasoned Irradiation")
plot(smoothed_trendcycle_glob, main = "Smoothed Trend-Cycle") # Plot smoothed trend
plot(remainder_glob, main = "Remainder")
# --- Global Irradiation ---
ts_glob <- ts(na.remove(merged_data$GLOB), frequency = 365)
# Perform STL Decomposition
stl_glob <- stlplus(ts_glob, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (using moving average, same order)
smoothed_trendcycle_glob <- ma(stl_glob$data[, "trend"], order = ma_order)
# Extract components (same approach as consumption)
seasonal_glob <- stl_glob$data[, "seasonal"]
deseasoned_glob <- ts_glob - seasonal_glob
trendcycle_glob <- stl_glob$data[, "trend"]
if ("cycle" %in% colnames(stl_glob$data)) {
trendcycle_glob <- trendcycle_glob + stl_glob$data[, "cycle"]
}
remainder_glob <- stl_glob$data[, "remainder"]
#Plot components
plot(ts_glob, main = "Global Irradiation")
plot(seasonal_glob, main = "Seasonal Component")
plot(deseasoned_glob, main = "Deseasoned Irradiation")
plot(smoothed_trendcycle_glob, main = "Smoothed Trend-Cycle") # Plot smoothed trend
plot(remainder_glob, main = "Remainder")
# --- Air Temperature ---
# ... (same structure as Global Irradiation) ...
ts_temp <- ts(na.remove(merged_data$LT), frequency = 365)
# Perform STL Decomposition
stl_temp <- stlplus(ts_temp, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (using moving average, same order as others)
smoothed_trendcycle_temp <- ma(stl_temp$data[, "trend"], order = ma_order)
seasonal_temp <- stl_temp$data[, "seasonal"]
deseasoned_temp <- ts_temp - seasonal_temp
trendcycle_temp <- stl_temp$data[, "trend"]
if ("cycle" %in% colnames(stl_temp$data)) {
trendcycle_temp <- trendcycle_temp + stl_temp$data[, "cycle"]
}
remainder_temp <- stl_temp$data[, "remainder"]
plot(ts_temp, main = "Air Temperature")
plot(seasonal_temp, main = "Seasonal Component")
plot(deseasoned_temp, main = "Deseasoned Temperature")
plot(smoothed_trendcycle_temp, main = "Smoothed Trend-Cycle") # Plot smoothed trend
plot(remainder_temp, main = "Remainder")
# --- Air Temperature ---
# ... (same structure as Global Irradiation) ...
ts_temp <- ts(na.remove(merged_data$LT), frequency = 365)
# Perform STL Decomposition
stl_temp <- stlplus(ts_temp, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (using moving average, same order as others)
smoothed_trendcycle_temp <- ma(stl_temp$data[, "trend"], order = ma_order)
seasonal_temp <- stl_temp$data[, "seasonal"]
deseasoned_temp <- ts_temp - seasonal_temp
trendcycle_temp <- stl_temp$data[, "trend"]
if ("cycle" %in% colnames(stl_temp$data)) {
trendcycle_temp <- trendcycle_temp + stl_temp$data[, "cycle"]
}
remainder_temp <- stl_temp$data[, "remainder"]
plot(ts_temp, main = "Air Temperature")
plot(seasonal_temp, main = "Seasonal Component")
plot(deseasoned_temp, main = "Deseasoned Temperature")
plot(smoothed_trendcycle_temp, main = "Smoothed Trend-Cycle") # Plot smoothed trend
plot(remainder_temp, main = "Remainder")
# --- Global Irradiation ---
ts_glob <- ts(na.remove(merged_data$GLOB), frequency = 365)
# Perform STL Decomposition
stl_glob <- stlplus(ts_glob, period = 365,
s.window = stl_parameters$s.window,
t.window = stl_parameters$t.window,
l.window = stl_parameters$l.window,
robust = stl_parameters$robust)
# Smooth the trend-cycle (using moving average, same order)
smoothed_trendcycle_glob <- ma(stl_glob$data[, "trend"], order = ma_order)
# Extract components (same approach as consumption)
seasonal_glob <- stl_glob$data[, "seasonal"]
deseasoned_glob <- ts_glob - seasonal_glob
trendcycle_glob <- stl_glob$data[, "trend"]
if ("cycle" %in% colnames(stl_glob$data)) {
trendcycle_glob <- trendcycle_glob + stl_glob$data[, "cycle"]
}
remainder_glob <- stl_glob$data[, "remainder"]
#Plot components
plot(ts_glob, main = "Global Irradiation")
plot(seasonal_glob, main = "Seasonal Component")
plot(deseasoned_glob, main = "Deseasoned Irradiation")
plot(smoothed_trendcycle_glob, main = "Smoothed Trend-Cycle") # Plot smoothed trend
plot(remainder_glob, main = "Remainder")
ts_data <- ts(na.remove(merged_data$Privat), frequency = 365)
diff_consumption <- diff(ts_data, lag = 365)
acf(diff_consumption, lag.max = 14, main = paste("ACF:(Seasonally Differenced, Short Term)"))
pacf(diff_consumption, lag.max = 14, main = paste("PACF:(Seasonally Differenced, Short Term)"))
# Repeat for Temperature and Global Irradiation...
