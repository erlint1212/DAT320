# Trend over years
dc_c_ts <- ts(dc_cut_filled_imp_noLeap$Temp, frequency = 365) #365 Leap years removed, no need for 365.25
dc_stl <- stl(dc_c_ts, s.window=7, t.window=35, robust=TRUE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=100, robust=FALSE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
# STL wide seasonality window
dc_stl <- stl(dc_c_ts, s.window="periodic", t.window=35, robust=TRUE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
# STL wide seasonality window
dc_stl <- stl(dc_c_ts, s.window="periodic", t.window=35, robust=FALSE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=5, robust=TRUE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=5, robust=FALSE)
autoplot(dc_stl)
# autocorrelation on remainders
remainders <- dc_stl$time.series[, "remainder"]
acf(remainders, lag.max = 365*5)
.stations_url = str_glue("https://{.client_id}@frost.met.no/sources/v0.jsonld")
raw_stations <- fromJSON(URLencode(.stations_url), flatten=TRUE)
df_stations <- data.frame(raw_stations)
# 2 from Ã…s SN17850
unique(df_stations[,"data.county"])
COUNTYS = c("AKERSHUS", "FINNMARK", "TROMS")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "TROMS",][c(2,3,5),],
stations[stations$county == "FINNMARK",][c(1,2,4),]
)
cut_stations
get_dc_from_frost <- function(src_id, cutoff_date_glob = NA) {
# Set this to TRUE to generate a json file
weather_file = paste(src_id, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = !file.exists(file = weather_file)
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={src_id}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- list()
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
stop()
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
if (!is.na(cutoff_date_glob)) {
dc <- dc %>% tsibble::filter_index(cutoff_date_glob ~ .)
}
return(dc)
}
station_list <- c()
for (i in 1:8) {
station_list <- c(station_list, as.character(timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i])))$Date[1]))
}
station_list
start_date_dc <- max(station_list)
start_date_dc
dc_stations <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[1]), start_date_dc)) %>%
rename(!!paste("Temp", cut_stations$name[1], sep=".") := "Temp")
for (i in 2:8) {
dc_stations[paste("Temp", cut_stations$name[i], sep=".")] <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i]), start_date_dc))$Temp
}
head(dc_stations)
dc_stations %>%
subset(select = -c(Date)) %>%
cor() %>%
round(2) %>%
data.frame() %>%
ggcorrplot(type = "upper", lab = TRUE)
p_list <- list()
for (colname in colnames(dc_stations)) {
dc_stl <- stl(ts(dc_stations[[colname]], frequency = 365), s.window=41, t.window=11, robust=TRUE)
pl <- autoplot(dc_stl) +
ggtitle(colname)
p_list[[colname]] <- pl
}
p_list <- list()
for (colname in colnames(dc_stations)) {
dc_stl <- stl(ts(dc_stations[[colname]], frequency = 365), s.window=41, t.window=11, robust=TRUE)
pl <- autoplot(dc_stl) +
ggtitle(colname)
p_list[[colname]] <- pl
}
p_list[[2]]
p_list[[3]]
p_list[[4]]
p_list[[5]]
p_list[[6]]
p_list[[7]]
p_list[[8]]
p_list[[9]]
ggplot_na_distribution2(airqual_NA$CO.GT., x_axis_labels = airqual_NA$timedate)
?ggplot_na_distribution2
ggplot_na_distribution2(airqual_NA$CO.GT., interval_size = 31)
knitr::opts_chunk$set(echo = TRUE)
power_consum_df <- read.table("consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
knitr::opts_chunk$set(echo = TRUE)
power_consum_df <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
# airqual <- airquality %>%
#   dplyr::select(-c("X", "X.1")) %>%
#   na.omit() %>%
#   mutate(timedate = dmy_hms(paste(Date, Time))) %>%
#   dplyr::select(-c("Time", "Date")) %>%
#   relocate(timedate) %>%
#   as.data.frame()
summary(airqual)
head(airqual)
power_consum_df <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
# airqual <- airquality %>%
#   dplyr::select(-c("X", "X.1")) %>%
#   na.omit() %>%
#   mutate(timedate = dmy_hms(paste(Date, Time))) %>%
#   dplyr::select(-c("Time", "Date")) %>%
#   relocate(timedate) %>%
#   as.data.frame()
summary(power_consum_df)
head(power_consum_df)
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
power_consum_df <- airquality %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))# %>%
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
power_consum_df <-power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))# %>%
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(ggcorrplot) # Easy cross-corrleation plots
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
summary(power_consum_df)
head(power_consum_df)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
summary(power_consum_df)
head(power_consum_df)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBUKSGRUPPE", "VOLUM_KWH"))
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
summary(power_consum_df)
head(power_consum_df)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH"))
# na.omit() %>%
# mutate(timedate = dmy_hms(paste(Date, Time))) %>%
# dplyr::select(-c("Time", "Date")) %>%
# relocate(timedate) %>%
# as.data.frame()
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH"))
# na.omit() %>%
# mutate(timedate = dmy_hms(paste(Date, Time))) %>%
# dplyr::select(-c("Time", "Date")) %>%
# relocate(timedate) %>%
# as.data.frame()
summary(power_consum_df)
head(power_consum_df)
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH"))
summary(power_consum_df)
head(power_consum_df)
power_consum_df %>%
pivot_longer(!STARTTID, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  STARTTID, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
power_consum_df %>%
dplyr::select(-c("FORBRUKSGRUPPE"))
pivot_longer(!STARTTID, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  STARTTID, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
power_consum_df %>%
dplyr::select(-c("FORBRUKSGRUPPE")) %>%
pivot_longer(!STARTTID, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  STARTTID, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = ymd_hms(STARTTID, tz = "UTC"))
summary(power_consum_df)
head(power_consum_df)
power_consum_sum_df <- power_consum_df %>%
aggregate(VOLUM_KWH, by=list(Category=FORBRUKSGRUPPE), FUN=sum)
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = ymd_hms(STARTTID, tz = "UTC"))
summary(power_consum_df)
head(power_consum_df)
power_consum_sum_df <- power_consum_df %>%
group_by(FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
power_consum_sum_df <- power_consum_df %>%
group_by(STARTTID, FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
power_consum_sum_df <- power_consum_df %>%
group_by(as.Date(STARTTID), FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
power_consum_sum_df <- power_consum_df %>%
group_by(as.Date(STARTTID), FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T)) %>%
rename(Date = as.Date(STARTTID))
power_consum_sum_df <- power_consum_df %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(as.Date(STARTTID), FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
power_consum_sum_df <- power_consum_df %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID, FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
data_range <- seq(min(power_consum_df$STARTTID), max(power_consum_df$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df$STARTTID]
?pivot_wider
power_consum_df_long <- power_consum_df %>% pivot_wider()
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df$STARTTID), max(power_consum_df$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df$STARTTID]
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_dv_long$STARTTID), max(power_consum_dv_long$STARTTID), by = "1 hour")
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df_long$STARTTID]
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df_long$STARTTID]
max(power_consum_df_long)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df_long$STARTTID]
max(power_consum_df_long$STARTTID)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df_long$STARTTID]
max(power_consum_df_long$STARTTID)[-1]
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
data_range[!data_range %in% power_consum_df_long$STARTTID][-1]
max(power_consum_df_long$STARTTID)[-1]
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long[power_consum_df$STARTTID >= as.character(last_date_gap)]
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
head(power_consum_df_long)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
power_consum_sum_df <- power_consum_df %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID, FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
head(power_consum_sum_df)
power_consum_sum_df <- power_consum_df_long_cut %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID, FORBRUKSGRUPPE) %>%
summarise(VOLUM_KWH = sum(VOLUM_KWH, na.rm = T))
power_consum_sum_df <- power_consum_df_long_cut %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
summarise_all(funs(sum))
power_consum_sum_df <- power_consum_df_long_cut %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
summarise_each(funs(sum))
power_consum_sum_df <- power_consum_df_long_cut %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID) %>%
summarise_each(funs(sum))
head(power_consum_sum_df)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut,10)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > "2021-04-30 23:00:00") %>%
dplyr::filter(STARTTID < "2024-09-30 00:00:00")
head(power_consum_df_long_cut)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
# tail(power_consum_df_long_cut)
last_date_gap
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap) %>%
distinct()
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
last_date_gap
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > "2021-04-30 23:00:00 UTC") %>%
dplyr::filter(STARTTID < "2024-09-30 00:00:00 UTC")
head(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID >= "2021-05-01 00:00:00 UTC") %>%
dplyr::filter(STARTTID < "2024-09-30 00:00:00 UTC")
head(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > yms_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < yms_hms("2024-09-30 00:00:00 UTC"))
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut)
power_consum_sum_df <- power_consum_df_long_cut_cutDay %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID) %>%
summarise_each(funs(sum))
head(power_consum_sum_df)
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = with_tz(ymd_hms(STARTTID)), tzone = "UTC")
summary(power_consum_df)
head(power_consum_df)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(ggcorrplot) # Easy cross-corrleation plots
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
power_consum_raw <- read.table("data/consumption_per_group_aas_hour.csv", sep=";", dec=",", header= T)
colnames(power_consum_raw)
power_consum_df <- power_consum_raw  %>%
dplyr::select(c("STARTTID", "FORBRUKSGRUPPE", "VOLUM_KWH")) %>%
mutate(STARTTID = ymd_hms(STARTTID, tz = "UTC"))
summary(power_consum_df)
head(power_consum_df)
power_consum_df_long <- power_consum_df %>%
pivot_wider(names_from = FORBRUKSGRUPPE, values_from = VOLUM_KWH)
data_range <- seq(min(power_consum_df_long$STARTTID), max(power_consum_df_long$STARTTID), by = "1 hour")
last_date_gap <- tail(data_range[!data_range %in% power_consum_df_long$STARTTID], 1)
power_consum_df_long_cut <- power_consum_df_long %>%
dplyr::filter(STARTTID >= last_date_gap)
head(power_consum_df_long_cut)
head(power_consum_df_long_cut)
tail(power_consum_df_long_cut)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut)
power_consum_sum_df <- power_consum_df_long_cut_cutDay %>%
mutate(STARTTID = as.Date(STARTTID)) %>%
group_by(STARTTID) %>%
summarise_each(funs(sum))
head(power_consum_sum_df)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut_cutDay)
# Mannualy remove the head and tail that don't sum to 1 whole day
power_consum_df_long_cut_cutDay <- power_consum_df_long_cut %>%
dplyr::filter(STARTTID > ymd_hms("2021-04-30 23:00:00 UTC")) %>%
dplyr::filter(STARTTID < ymd_hms("2024-09-30 00:00:00 UTC"))
head(power_consum_df_long_cut_cutDay)
tail(power_consum_df_long_cut_cutDay, 24)
