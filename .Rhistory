non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(c(x, y.gen))
}
test <- data_gen()
data_gen <- function(c=0, t=0, cm=0, cp=0, cs=0, nnm=0, nnp=0, snn=0, nnnm=0, nnnp=0, snnn=0) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(c(x, y.gen))
}
test <- data_gen(t=10)
data_gen <- function(c=0, t=0, cm=0, cp=0, cs=0, nnm=0, nnp=0, snn=0, nnnm=0, nnnp=0, snnn=0) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(c(x, y.gen))
}
test <- data_gen(nnp = 1000)
data_gen <- function(c=0, t=0, cm=0, cp=0, cs=0, nnm=0, nnp=0, snn=0, nnnm=0, nnnp=0, snnn=0) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(list(x, y.gen))
}
test <- data_gen(nnp = 1000)
data_gen <- function(c=0, t=0, cm=0, cp=100, cs=0, nnm=1, nnp=10000, snn=500, nnnm=0, nnnp=10000, snnn=500) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(list(x, y.gen))
}
test <- data_gen()
all_assum <- data_gen()
lm.gen <- lm(all_assum$y.gen ~ all_assum$x)
data_gen <- function(c=0, t=0, cm=0, cp=100, cs=0, nnm=1, nnp=10000, snn=500, nnnm=0, nnnp=10000, snnn=500) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(list("x"=x,"y.gen"=y.gen))
}
all_assum <- data_gen()
lm.gen <- lm(all_assum$y.gen ~ all_assum$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
data_gen <- data_gen(nnnm = 10000)
lm.gen <- lm(data_gen$y.gen ~ data_gen$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
data_gen <- data_gen(nnnm = -10000)
data_gen <- data_gen(nnnm = 10000)
data_gen <- function(c=0, t=0, cm=0, cp=100, cs=0, nnm=1, nnp=10000, snn=500, nnnm=0, nnnp=10000, snnn=500) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(list("x"=x,"y.gen"=y.gen))
}
data_gen <- function(c=0, t=0, cm=0, cp=100, cs=0, nnm=1, nnp=10000, snn=500, nnnm=0, nnnp=10000, snnn=500) {
set.seed(42)
n <- 1000
x <- 1:n
# Changeable parameters
# - Change the parameters to affect the generated data points below.
# - You may copy this code multiple times to answer all the questions in the exercise.
# - You may find it reasonable to argue for multiple violations from a single generated set of data points.
contant <- c
trend <- t
curve_magnitue <- cm
curve_period <- cp
curve_shift <- cs
normal_noise_magnitue <- nnm
norm_noise_periode <- nnp
shift_norm_noise <- snn
non_normal_noise_magnitue <- nnnm
non_norm_noice_periode <- nnnp
shift_non_norm_noise <- snnn
y.gen <- contant +
trend * x +
curve_magnitue* sin(
(x/curve_period + curve_shift)*pi
) +
normal_noise_magnitue*cos(
(x/norm_noise_periode + shift_norm_noise/norm_noise_periode)*pi
)*rnorm(n, sd = 3) +
non_normal_noise_magnitue*cos(
(x/non_norm_noice_periode + shift_non_norm_noise/non_norm_noice_periode)*pi
) * rexp(n, rate = 0.2)
p <- qplot(x, y.gen, ylab = "y") +
geom_point(size = 0.1) +
labs(title = "Data generate for linear regrestion")
# Display the plot
print(p)
return(list("x"=x,"y.gen"=y.gen))
}
gen_data <- data_gen()
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, t = 100)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, t = 1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, tp = 1000)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, nnp = 1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, nnp = 1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x**2)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=1000, nnp = 1000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x**4 + gen_data$x**2)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 100)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, nnnp = 50000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 1)
plot(lm.gen, which = 2)
plot(lm.gen, which = 3)
plot(lm.gen, which = 5)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
gen_data <- data_gen(nnnm = -10000, snnn = 5000, nnnp = 50000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, which = 2)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen, which = 2)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen, 2)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen, 1)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x**2)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen, 1)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = -10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnnp = 10000)
lm.gen <- lm(gen_data$y.gen ~ (gen_data$x)^4)
plot(lm.gen, 1)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 50000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 0)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 2)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 5000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 5000, t = 10000, t = 1000000)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 5000, t = 100000)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 5000, t = 1)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 5)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
gen_data <- data_gen(nnnm = 10000, snnn = 5000, cs=10000, cm = 10000, snn = 10000, nnm = 0, nnnp = 5000, t = 1)
lm.gen <- lm(gen_data$y.gen ~ gen_data$x)
plot(lm.gen, 2)
weatherHistory <- read.csv("weatherHistory.csv")
select_wH <- weatherHistory %>% select(Temperature..C., Apparent.Temperature..C., Humidity)
select_wH %>%
cor() %>%
data.frame()
select_wH %>%
cor() %>%
data.frame()
pairwise_corr <- select_wH %>%
cor() %>%
data.frame()
pairwise_corr
View(weatherHistory)
pairwise_corr <- select_wH %>%
cor() %>%
data.frame()
pairwise_corr
pairwise_corr <- select_wH %>%
cor() %>%
data.frame()
pairwise_corr
rownames(pairwise_corr)
pairwise_corr <- select_wH %>%
cor() %>%
data.frame()
pairwise_corr
rownames(pairwise_corr)
pairwise_corr["Temperature..C.", "Temperature..C."]
