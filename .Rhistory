ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
t <- airqual_c$timedate
x_1 <- pca$x[, 1:6] %*% t(pca$rotation[, 1:6])
x_2 <- t(pca$center + pca$scale * t(x_1))
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
airquality <- read.table("AirQualityUCI.csv", sep=";", dec=",", header= T)
airqual <- airquality %>%
dplyr::select(-c("X", "X.1")) %>%
na.omit() %>%
mutate(timedate = dmy_hms(paste(Date, Time))) %>%
dplyr::select(-c("Time", "Date")) %>%
relocate(timedate) %>%
as_tibble()
summary(airqual)
head(airqual)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pc <- prcomp(airqual[,-1])
summary(pc)
plot(pc, type = "l")
pc_v <- data.frame(PC = paste0("PC ", ncol(pc$x)),
var_explained = pc$sdev^2 / sum(pc$sdev^2)) %>%
mutate(cum_explained = cumsum(var_explained))
pp <- pc_v[1:3,] %>%
pivot_longer(!PC, names_to="Quantity", values_to="Explained") %>%
ggplot(aes(x = PC, y = Explained, color=Quantity, group=Quantity))+
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Variance Explained", x = "Principal Component",
y = "Variance Explained")
pp + geom_label(aes(label = round(Explained, 2)))
biplot(pc, scale=0, col=c('blue', 'red'), xlabs=rep('*', nrow(pc$x[, 1:3])))
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
airqual_c <- airqual %>%
dplyr::select(-c("NMHC.GT."))
airqual_c[airqual_c == -200] = NA
#airqual_c <- imputeTS::na_mean(airqual_c, option = "mean")
# Missing Value Imputation by Weighted Moving Average, Simple moving average
# Plain rolling average
airqual_c <- imputeTS::na_ma(airqual_c, k = 4, weighting = "simple")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pca <- prcomp(airqual_c[,-1]) #, center = TRUE, scale. = TRUE
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
# biplots
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=3,y=4, loadings=TRUE, loadings.label=TRUE)
#Variance explained
summary(pca)$importance[3,]
t <- airqual_c$timedate
x_1 <- pca$x[, 1:6] %*% t(pca$rotation[, 1:6])
x_2 <- t(pca$center + pca$scale * t(x_1))
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x[,1:6]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate[1:100], pca$x[1:100,1:6]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3)))
.client_id <- str_trim(read_file("client_id.txt"))
# Server to collect data from and resource we want from server
server <- "frost.met.no"
resource <- "observations/v0.jsonld"
# Station(s) we want data for. SN17850 is the station ID for Ã…s (Blindern is SN18700)
sources <- 'SN17850'
# Type of data we want, P1D means daily data
elements <- 'mean(air_temperature P1D)'
# Time range we want data for
reference_time <- '1874-01-01/2023-12-31'
# Specify that we want mean temperature calculated from midnight to midnight
timeoffsets <- 'PT0H'
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
# Set this to TRUE to generate a json file
get_data_from_frost = FALSE
weather_file = "weather_data_json.rds.bz2"
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
head(df)
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble() -> dc
head(dc)
has_gaps(dc)
gaps <- count_gaps(dc)
head(gaps)
cutoff_date <-  as.character(tail(gaps[gaps$.n >= 31,], n=1)$.to)
cutoff_date
dc_cut <- dc %>% tsibble::filter_index(cutoff_date ~ .)
head(dc_cut)
dc_cut_filled <- tsibble::fill_gaps(dc_cut, .full = TRUE)
head(dc_cut_filled)
dc_cut_filled_imp <- imputeTS::na_ma(dc_cut_filled, k = 4, weighting = "simple")
tsibble::has_gaps(dc_cut_filled_imp)
is.numeric(dc_cut_filled_imp$Temp)
dc_cut_filled_imp %>%
ggplot(aes(Date, Temp)) +
geom_line()
dc_cut_filled_imp_noLeap <- dc_cut_filled_imp %>%
dplyr::filter(!(month(Date) == 2 & day(Date) == 29))
head(dc_cut_filled_imp_noLeap)
timeseries_cleaner <- function(table) {
gaps <- count_gaps(table)
cutoff_date <-  as.character(tail(gaps[gaps$.n >= 31,], n=1)$.to)
dc_cut <- dc %>% tsibble::filter_index(cutoff_date ~ .)
dc_cut_filled_imp <- imputeTS::na_ma(dc_cut_filled, k = 4, weighting = "simple")
dc_cut_filled_imp_noLeap <- dc_cut_filled_imp %>%
dplyr::filter(!(month(Date) == 2 & day(Date) == 29))
return(dc_cut_filled_imp_noLeap)
}
identical(timeseries_cleaner(dc), dc_cut_filled_imp_noLeap)
dc %>%
ggplot(aes(Date, Temp)) +
geom_line()
tsibble::fill_gaps(dc, .full = TRUE) %>%
imputeTS::na_ma(airqual_c, k = 4, weighting = "simple") %>%
ggplot(aes(Temp)) +
geom_histogram(aes(y = ..density..), fill = "white", color="black") +
stat_density(kernel = "gaussian", fill = NA, colour = "black") +
ggtitle("imputed values")
dc %>%
ggplot(aes(Temp)) +
geom_histogram(aes(y = ..density..), fill = "white", color="black") +
stat_density(kernel = "gaussian", fill = NA, colour = "black") +
ggtitle("original data")
ts_dc <- ts(dc) #tsibble::fill_gaps(dc, .full = TRUE)
head(ts_dc)
acf(dc$Temp, lag.max = 365*5.5)
acf(dc$Temp, lag.max = 7*4)
dc %>%
dplyr::filter((month(Date) == 8 & day(Date) == 1)) %>%
ggplot(aes(Date, Temp)) +
geom_point() +
ylim(0, NA)
summary(dc)
dc_c <- dc_cut_filled_imp_noLeap
summary(dc_c)
library(datasets)
data("AirPassengers")
ap_df <- tibble(passengers=AirPassengers,
ym_date=time(AirPassengers)) |>
mutate(year = as.integer(ym_date),
month = round((ym_date * 12) %% 12) + 1)
ggplot(ap_df, aes(x=ym_date, y=passengers)) +
geom_line() +
geom_point(colour=ap_df$month) +
scale_x_continuous(breaks = seq(min(round(ap_df$ym_date)), max(round(ap_df$ym_date)), by = 2))
ap_df <- tibble(passengers=AirPassengers,
ym_date=time(AirPassengers)) |>
mutate(year = as.integer(ym_date),
month = round((ym_date * 12) %% 12) + 1)
head(ap_df)
ggplot(ap_df, aes(x=ym_date, y=passengers)) +
geom_line() +
geom_point(colour=ap_df$month) +
scale_x_continuous(breaks = seq(min(round(ap_df$ym_date)), max(round(ap_df$ym_date)), by = 2))
dc_c <- dc_cut_filled_imp_noLeap
summary(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
dc_s <-df |> select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
mutate(Year=year(Date), Week=week(Date),
Decade = as.factor(Year - Year %% 10))
dc_c <- dc_cut_filled_imp_noLeap
summary(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
head(df)
dc_s <- df |> select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
mutate(Year=year(Date), Week=week(Date),
Decade = as.factor(Year - Year %% 10))
dc_c <- dc_cut_filled_imp_noLeap
summary(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
head(df)
dc_s <- df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
mutate(Year=year(Date), Week=week(Date),
Decade = as.factor(Year - Year %% 10))
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
head(dc_s)
dc_stl <- stl(dc_s, s.window=10, na.action = na.exclude)
head(AirPassengers)
AirPassengers
head(dc_c)
dc_c <- dc_cut_filled_imp_noLeap
summary(dc_c)
head(ts(dc_c))
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
head(dc_s)
dc_c <- dc_cut_filled_imp_noLeap
head(ts(dc_c))
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
head(ts(dc_c))
rnum(dc_c)
dc_c <- dc_cut_filled_imp_noLeap
head(ts(dc_c))
nrow(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
head(as.ts(dc_c))
nrow(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
summary(dc_c_ts)
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=35, robust=TRUE)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
head(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- as.ts(dc_c)
head(dc_c)
ts(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- ts(dc_c)
head(dc_c)
ts(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- ts(dc_c)
head(dc_c_ts)
ts(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
head(dc)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- ts(dc_c, frequency = 365) # Leap years removed
head(dc_c_ts)
ts(dc_c)
#dc_c_ts
# ap_df <- df %>%
#   dplyr::select(referenceTime, value) %>%
#   mutate(referenceTime=as.Date(referenceTime)) %>%
#   rename(Date=referenceTime, Temp=value) %>%
#   as_tsibble() -> dc
# ap_df <- df %>% tibble(passengers=AirPassengers,
#                  ym_date=time(AirPassengers)) |>
#          mutate(year = as.integer(ym_date),
#                 month = round((ym_date * 12) %% 12) + 1)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- ts(dc_c, frequency = 365) # Leap years removed
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
dc_c <- dc_cut_filled_imp_noLeap
dc_c_ts <- ts(dc_c$Temp, frequency = 365) # Leap years removed
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
autoplot(dc_stl)
dc_c_ts <- ts(dc_cut_filled_imp_noLeap$Temp, frequency = 365) # Leap years removed
dc_stl <- stl(dc_c_ts, s.window=10, na.action = na.exclude)
autoplot(dc_stl)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=35, robust=TRUE)
autoplot(dc_stl)
dc_stl <- stl(dc_c_ts, s.window="periodic", t.window=35, robust=TRUE)
autoplot(dc_stl)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=5, robust=TRUE)
autoplot(dc_stl)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=35, robust=FALSE)
autoplot(dc_stl)
# STL wide seasonality window
dc_stl <- stl(dc_c_ts, s.window="periodic", t.window=35, robust=FALSE)
autoplot(dc_stl)
```{r}
# STL wide seasonality window
dc_stl <- stl(dc_c_ts, s.window="periodic", t.window=35, robust=FALSE)
autoplot(dc_stl)
dc_stl <- stl(dc_c_ts, s.window=7, t.window=5, robust=FALSE)
autoplot(dc_stl)
