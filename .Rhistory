p_list[[colname]] <- pl
}
p_list$Temp.ASKER
p_list$Temp.ÅS
p_list$`Temp.STAVANGER - VÅLAND`
p_list$Temp.SAUDA
p_list$`Temp.OBRESTAD FYR`
p_list$Temp.KAUTOKEINO
p_list$`Temp.KIRKENES LUFTHAVN`
p_list$Temp.SIHCCAJAVRI
mts_pca <- dc_stations %>%
subset(select = -c(Date)) %>%
prcomp()
plot(mts_pca, type = "l")
data.frame(date = dc_stations$Date, mts_pca$x) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date[1:100], mts_pca$x[1:100,]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
airquality <- read.table("AirQualityUCI.csv", sep=";", dec=",", header= T)
airqual <- airquality %>%
dplyr::select(-c("X", "X.1")) %>%
na.omit() %>%
mutate(timedate = dmy_hms(paste(Date, Time))) %>%
dplyr::select(-c("Time", "Date")) %>%
relocate(timedate) %>%
as_tibble()
summary(airqual)
head(airqual)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pc <- prcomp(airqual[,-1])
summary(pc)
plot(pc, type = "l")
pc_v <- data.frame(PC = paste0("PC ", ncol(pc$x)),
var_explained = pc$sdev^2 / sum(pc$sdev^2)) %>%
mutate(cum_explained = cumsum(var_explained))
pp <- pc_v[1:3,] %>%
pivot_longer(!PC, names_to="Quantity", values_to="Explained") %>%
ggplot(aes(x = PC, y = Explained, color=Quantity, group=Quantity))+
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Variance Explained", x = "Principal Component",
y = "Variance Explained")
pp + geom_label(aes(label = round(Explained, 2)))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
biplot(pc, scale=0, col=c('blue', 'red'), xlabs=rep('*', nrow(pc$x[, 1:3])))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
biplot(pc, scale=0, col=c('blue', 'red'), xlabs=rep('*', nrow(pc$x[, 1:2])))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pc$x)
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
autoplot(d_pc[,-timedate])
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
autoplot(d_pc[-timedate,])
pairs(pca$x, main = "PCA Score Plots", pch = 19)
pairs(pca$x[,1:6], main = "PCA Score Plots", pch = 19)
pairs(pca$x[,1:3], main = "PCA Score Plots", pch = 19)
missing_values <- colSums(is.na(airqual))
head(missing_values)
missing_values <- colSums(is.na(airqual))
head(missing_values)
missing_values <- colSums(airqual[airqual == -200])
missing_values <- colSums(airqual[airqual == -200,])
airqual_NA <- airqual_c[airqual_c == -200] = NA
airqual_NA <- airqual[airqual == -200] = NA
airqual_NA <- airqual[airqual == -200] = NA
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
head(missing_values)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/colSums(!is.na(airqual_NA))
head(missing_values)
head(perc_NA_airqal)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_data <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA[, sensor_columns]))) %>%
select(timedate, Missing)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_data <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA[, sensor_columns]))) %>%
select(timedate, Missing) %>%
ggplot(missing_data, aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_data <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA[, sensor_columns]))) %>%
dplyr::select(timedate, Missing) %>%
ggplot(missing_data, aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
head(airqual_NA)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_data <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA))) %>%
dplyr::select(timedate, Missing) %>%
ggplot(missing_data, aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_data <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA))) %>%
dplyr::select(timedate, Missing) %>%
ggplot(aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA))) %>%
dplyr::select(timedate, Missing) %>%
ggplot(aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_values <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA))) %>%
dplyr::select(timedate, Missing)
ggplot(aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
print("Missing Values in Each Sensor:")
print(missing_values)
# 2. Investigate the degree of missing values
# Visualizing the number of missing values over time
# Create a data frame to visualize missing values
missing_values <- airqual_NA %>%
mutate(Missing = rowSums(is.na(airqual_NA))) %>%
dplyr::select(timedate, Missing)
ggplot(missing_values, aes(x = timedate, y = Missing)) +
geom_line(color = "red") +
labs(title = "Number of Missing Values Over Time", x = "DateTime", y = "Missing Values Count") +
theme_minimal()
# Create a summary of missing values in percentage
missing_percentage <- (missing_values / nrow(air_quality_ts)) * 100
# Create a summary of missing values in percentage
missing_percentage <- (missing_values / nrow(airqual_NA)) * 100
# Create a summary of missing values in percentage
missing_percentage <- (missing_values / colSums(!is.na(airqual_NA))) * 100
head(missing_values)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/nrow(airqual_NA)
head(missing_values)
head(perc_NA_airqal)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/nrow(airqual_NA)
autoplot(missing_values)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100
missing_values
perc_NA_airqal
perc_NA_airqal
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100
missing_values
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA)) %>% data.frame()
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100 %>% data.frame()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA)) %>% data.frame()
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100
perc_NA_airqal
missing_values
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA)) %>% data.frame()
perc_NA_airqal <- missing_values/nrow(airqual_NA)*100
perc_NA_airqal
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA)) %>% data.frame()
perc_NA_airqal <- (missing_values/nrow(airqual_NA))*100
perc_NA_airqal
nrow(airqual)
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA))
perc_NA_airqal <- (missing_values/nrow(airqual_NA))*100
missing_values %>% data.frame()
perc_NA_airqal %>% data.frame()
missing_values %>% data.frame()
airqual_NA <- airqual
airqual_NA[airqual_NA == -200] = NA
missing_values <- colSums(is.na(airqual_NA)) %>% data.frame()
perc_NA_airqal <- (missing_values/nrow(airqual_NA))*100
missing_values
perc_NA_airqal
perc_NA_airqal
airqual_c <- airqual %>%
dplyr::select(-c("NMHC.GT."))
airqual_c[airqual_c == -200] = NA
#airqual_c <- imputeTS::na_mean(airqual_c, option = "mean")
# Missing Value Imputation by Weighted Moving Average, Simple moving average
# Plain rolling average
airqual_c <- imputeTS::na_ma(airqual_c, k = 4, weighting = "simple")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c <- airqual %>%
dplyr::select(-c("NMHC.GT."))
airqual_c[airqual_c == -200] = NA
airqual_c <- imputeTS::na_ma(airqual_c, k = 4, weighting = "simple")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
pca <- prcomp(airqual_c[,-1]) #, center = TRUE, scale. = TRUE
pca <- prcomp(airqual_c[,-1] scale.=TRUE) #, center = TRUE, scale. = TRUE
pca <- prcomp(airqual_c[,-1] .scale=TRUE) #, center = TRUE, scale. = TRUE
pca <- prcomp(airqual_c[,-1] scale=TRUE) #, center = TRUE, scale. = TRUE
pca <- prcomp(airqual_c[,-1], scale=TRUE) #, center = TRUE, scale. = TRUE
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
# biplots
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=3,y=4, loadings=TRUE, loadings.label=TRUE)
#Variance explained
summary(pca)$importance[3,]
t <- airqual_c$timedate
x_1 <- pca$x[, 1:6] %*% t(pca$rotation[, 1:6])
x_2 <- t(pca$center + pca$scale * t(x_1))
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pca <- prcomp(airqual_c[,-1]) #, center = TRUE, scale. = TRUE
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
# biplots
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=3,y=4, loadings=TRUE, loadings.label=TRUE)
#Variance explained
summary(pca)$importance[3,]
t <- airqual_c$timedate
x_1 <- pca$x[, 1:6] %*% t(pca$rotation[, 1:6])
x_2 <- t(pca$center + pca$scale * t(x_1))
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3) +
ggtitle("PCA without accounting for scaling")
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3) +
ggtitle("PCA accounting for scaling")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3) +
ggtitle("Original data")
data.frame(timedate = airqual_c$timedate, pca$x[,1:6]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate[1:100], pca$x[1:100,1:6]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3)))
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
airquality <- read.table("AirQualityUCI.csv", sep=";", dec=",", header= T)
airqual <- airquality %>%
dplyr::select(-c("X", "X.1")) %>%
na.omit() %>%
mutate(timedate = dmy_hms(paste(Date, Time))) %>%
dplyr::select(-c("Time", "Date")) %>%
relocate(timedate) %>%
as_tibble()
summary(airqual)
head(airqual)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pc <- prcomp(airqual[,-1])
summary(pc)
plot(pc, type = "l")
pc_v <- data.frame(PC = paste0("PC ", ncol(pc$x)),
var_explained = pc$sdev^2 / sum(pc$sdev^2)) %>%
mutate(cum_explained = cumsum(var_explained))
pp <- pc_v[1:3,] %>%
pivot_longer(!PC, names_to="Quantity", values_to="Explained") %>%
ggplot(aes(x = PC, y = Explained, color=Quantity, group=Quantity))+
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Variance Explained", x = "Principal Component",
y = "Variance Explained")
pp + geom_label(aes(label = round(Explained, 2)))
biplot(pc, scale=0, col=c('blue', 'red'), xlabs=rep('*', nrow(pc$x[, 1:2])))
autoplot(pc, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pc, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
pairs(pc$x[,1:3], main = "PCA Score Plots", pch = 19)
autoplot(pc, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pc, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
