airqual_c[airqual_c == -200] = NA
airqual_c <- imputeTS::na_mean(airqual_c, option = "mean")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
pc_v <- data.frame(PC = paste0("PC ", 1:ncol(pc$x)),
var_explained = pc$sdev^2 / sum(pc$sdev^2)) |>
mutate(cum_explained = cumsum(var_explained))
pc_v
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
#Variance explained
summary(pca)$importance[3,]
t <- datetime
x_1 <- pca$x[, 1:4] %*% t(pca$rotation[, 1:4])
x_2 <- t(pca$center + pca$scale * t(x_1))
ggplot() +
geom_line(data = data.frame(datetime = airqual_c$datetime, x_1), aes(datetime, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(datetime = airqual_c$datetime, x_2), aes(datetime, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("datetime", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
# biplots
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=3,y=4, loadings=TRUE, loadings.label=TRUE)
t <- datetime
x_1 <- pca$x[, 1:7] %*% t(pca$rotation[, 1:7])
x_2 <- t(pca$center + pca$scale * t(x_1))
ggplot() +
geom_line(data = data.frame(datetime = airqual_c$datetime, x_1), aes(datetime, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(datetime = airqual_c$datetime, x_2), aes(datetime, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("datetime", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
head(airqual_c)
ggplot() +
geom_line(data = data.frame(datetime = airqual_c$timedate, x_1), aes(datetime, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(datetime = airqual_c$timedate, x_2), aes(datetime, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("datetime", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
ggplot() +
geom_line(data = data.frame(datetime = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(datetime = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("datetime", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
head(airqual_c)
ggplot() +
geom_line(data = data.frame(timedate = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(timedate = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("datetime", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
ggplot() +
geom_line(data = data.frame(timedate = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
geom_line(data = data.frame(timedate = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
geom_line(data = airqual_c[c("timedate", "RH"),] , aes(datetime, RH), color = "red") +
theme_minimal() +
xlab("Time [a.u.]")
# ggplot() +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
#   geom_line(data = airqual_c[c("timedate", "RH"),] , aes(datetime, RH), color = "red") +
#   theme_minimal() +
#   xlab("Time [a.u.]")
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# ggplot() +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
#   geom_line(data = airqual_c[c("timedate", "RH"),] , aes(datetime, RH), color = "red") +
#   theme_minimal() +
#   xlab("Time [a.u.]")
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# ggplot() +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_1), aes(timedate, RH), color = "blue", alpha = 0.5) +
#   geom_line(data = data.frame(timedate = airqual_c$timedate, x_2), aes(timedate, RH), color = "green", alpha = 0.5) +
#   geom_line(data = airqual_c[c("timedate", "RH"),] , aes(datetime, RH), color = "red") +
#   theme_minimal() +
#   xlab("Time [a.u.]")
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_2) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# data.frame(timedate = airqual_c$timedate, x_2) %>%
#   pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
#   ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
#   geom_line() +
#   theme_minimal() +
#   facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x[,1:7]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x[1:100,1:7]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate[1:100], pca$x[1:100,1:7]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
.client_id <- str_trim(read_file("client_id.txt"))
# Server to collect data from and resource we want from server
server <- "frost.met.no"
resource <- "observations/v0.jsonld"
# Station(s) we want data for. SN17850 is the station ID for Ã…s (Blindern is SN18700)
sources <- 'SN17850'
# Type of data we want, P1D means daily data
elements <- 'mean(air_temperature P1D)'
# Time range we want data for
reference_time <- '1874-01-01/2023-12-31'
# Specify that we want mean temperature calculated from midnight to midnight
timeoffsets <- 'PT0H'
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
#.stations_url = str_glue("https://{.client_id}@frost.met.no/sources/v0.jsonld")
#raw_stations <- fromJSON(URLencode(.stations_url), flatten=TRUE)
# COUNTYS = c(fylke1, fylke2, etc)   # replace with names of "fylker" you are interested in
#
# stations <- unnest(raw_stations$data, cols='id') |>
#   select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
#   mutate(validFrom=as.Date(validFrom)) |>
#   filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
get_data_from_frost = FALSE
weather_file = "weather_data_json.rds.bz2"
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
.client_id <- str_trim(read_file("client_id.txt"))
.client_id
# Server to collect data from and resource we want from server
server <- "frost.met.no"
resource <- "observations/v0.jsonld"
# Station(s) we want data for. SN17850 is the station ID for Ã…s (Blindern is SN18700)
sources <- 'SN17850'
# Type of data we want, P1D means daily data
elements <- 'mean(air_temperature P1D)'
# Time range we want data for
reference_time <- '1874-01-01/2023-12-31'
# Specify that we want mean temperature calculated from midnight to midnight
timeoffsets <- 'PT0H'
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
#.stations_url = str_glue("https://{.client_id}@frost.met.no/sources/v0.jsonld")
#raw_stations <- fromJSON(URLencode(.stations_url), flatten=TRUE)
# COUNTYS = c(fylke1, fylke2, etc)   # replace with names of "fylker" you are interested in
#
# stations <- unnest(raw_stations$data, cols='id') |>
#   select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
#   mutate(validFrom=as.Date(validFrom)) |>
#   filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
knitr::opts_chunk$set(echo = TRUE)
.client_id <- str_trim(read_file("client_id.txt"))
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
.client_id <- str_trim(read_file("client_id.txt"))
# Server to collect data from and resource we want from server
server <- "frost.met.no"
resource <- "observations/v0.jsonld"
# Station(s) we want data for. SN17850 is the station ID for Ã…s (Blindern is SN18700)
sources <- 'SN17850'
# Type of data we want, P1D means daily data
elements <- 'mean(air_temperature P1D)'
# Time range we want data for
reference_time <- '1874-01-01/2023-12-31'
# Specify that we want mean temperature calculated from midnight to midnight
timeoffsets <- 'PT0H'
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
#.stations_url = str_glue("https://{.client_id}@frost.met.no/sources/v0.jsonld")
#raw_stations <- fromJSON(URLencode(.stations_url), flatten=TRUE)
# COUNTYS = c(fylke1, fylke2, etc)   # replace with names of "fylker" you are interested in
#
# stations <- unnest(raw_stations$data, cols='id') |>
#   select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
#   mutate(validFrom=as.Date(validFrom)) |>
#   filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
get_data_from_frost = FALSE
weather_file = "weather_data_json.rds.bz2"
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
get_data_from_frost = TRUE
weather_file = "weather_data_json.rds.bz2"
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
head(df)
df |> select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
mutate(Year=year(Date), Week=week(Date),
Decade = as.factor(Year - Year %% 10)) |>
as_tibble() -> dc
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
mutate(Year=year(Date), Week=week(Date),
Decade = as.factor(Year - Year %% 10)) |>
as_tibble() -> dc
dc
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
head(pca$rotation)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
head(data.frame(pca$rotation))
# pca$rotation %>%
#   ggplot(aes())
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
head(data.frame(pca$rotation))
data.frame(pca$rotation) %>%
ggplot(aes())
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
data.frame(melt(pca$rotation))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(data.frame(pca$rotation))
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
knitr::opts_chunk$set(echo = TRUE)
options(contrasts = c("contr.sum", "contr.poly"))
require("ggplot2")
require("dplyr")
require("ppcor")
require("caret")
require("tidyr")
require("stringr")
require("lubridate")
require("tsibble")
require("ggfortify")
require("gridExtra")
require("reshape2")
library(imputeTS)   # Time series missing value imputation
library(jsonlite)   # handle JSON data returned by Frost
library(tidyr)      # unpack data from JSON format
library(tidyverse)  # data manipulation with mutate etc, string formatting
library(lubridate)  # process date and time information
library(tsibble)    # special tibbles for time series
library(fpp3)       # autoplot() and gg_season() for time series
library(readr)      # to read the Frost client ID from file
airquality <- read.table("AirQualityUCI.csv", sep=";", dec=",", header= T)
airqual <- airquality %>%
dplyr::select(-c("X", "X.1")) %>%
na.omit() %>%
mutate(timedate = dmy_hms(paste(Date, Time))) %>%
dplyr::select(-c("Time", "Date")) %>%
relocate(timedate) %>%
as_tibble()
summary(airqual)
head(airqual)
airqual %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pc <- prcomp(airqual[,-1])
summary(pc)
plot(pc, type = "l")
pc_v <- data.frame(PC = paste0("PC ", ncol(pc$x)),
var_explained = pc$sdev^2 / sum(pc$sdev^2)) %>%
mutate(cum_explained = cumsum(var_explained))
pp <- pc_v[1:3,] %>%
pivot_longer(!PC, names_to="Quantity", values_to="Explained") %>%
ggplot(aes(x = PC, y = Explained, color=Quantity, group=Quantity))+
geom_line() + geom_point() +
theme_minimal() +
labs(title = "Variance Explained", x = "Principal Component",
y = "Variance Explained")
pp + geom_label(aes(label = round(Explained, 2)))
biplot(pc, scale=0, col=c('blue', 'red'), xlabs=rep('*', nrow(pc$x[, 1:3])))
d_pc <- data.frame(Time=airqual[,1], pc$x[,1:3])
head(d_pc)
airqual_c <- airqual %>%
dplyr::select(-c("NMHC.GT."))
airqual_c[airqual_c == -200] = NA
#airqual_c <- imputeTS::na_mean(airqual_c, option = "mean")
# rolling mean
airqual_c <- imputeTS::na_ma(airqual_c, k = 4, weighting = "simple")
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
pca <- prcomp(airqual_c[,-1])
# screeplot
pca <- prcomp(airqual_c[,-1])
plot(pca, type = "l")
# biplots
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=2,y=3, loadings=TRUE, loadings.label=TRUE)
autoplot(pca, x=3,y=4, loadings=TRUE, loadings.label=TRUE)
#Variance explained
summary(pca)$importance[3,]
t <- datetime
x_1 <- pca$x[, 1:7] %*% t(pca$rotation[, 1:7])
x_2 <- t(pca$center + pca$scale * t(x_1))
data.frame(timedate = airqual_c$timedate, x_1) %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
# data.frame(timedate = airqual_c$timedate, x_2) %>%
#   pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
#   ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
#   geom_line() +
#   theme_minimal() +
#   facet_wrap(~ Features, scales = "free_y", ncol = 3)
airqual_c %>%
pivot_longer(!timedate, names_to="Features", values_to="Measurement") %>%
ggplot(aes(x =  timedate, y = Measurement, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate, pca$x[,1:7]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(timedate = airqual_c$timedate[1:100], pca$x[1:100,1:7]) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(data.frame(pca$rotation))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation)
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation) %>%
ggplot(aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 2)))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation) %>%
ggplot(aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3)))
autoplot(pca, x=1,y=2, loadings=TRUE, loadings.label=TRUE)
data.frame(pca$rotation)
melt(pca$rotation) %>%
ggplot(aes(Var2, Var1)) +
geom_tile(aes(fill = value)) +
geom_text(aes(fill = value, label = round(value, 3)))
