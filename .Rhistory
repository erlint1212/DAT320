dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "TROMS",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
col3 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[3])))
COUNTYS = c("AKERSHUS", "FINNMARK", "MØRE OG ROMSDAL")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "MØRE OG ROMSDAL",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
col3 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[3])))
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
col5 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[5])))
COUNTYS = c("AKERSHUS", "FINNMARK", "NORSKEHAVET")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "NORSKEHAVET",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
COUNTYS = c("AKERSHUS", "FINNMARK", "NORSKEHAVET")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "NORSKEHAVET",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
COUNTYS = c("AKERSHUS", "FINNMARK", "NORDSJØEN")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "NORDSJØEN",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
COUNTYS = c("AKERSHUS", "FINNMARK", "KONTINENTALSOKKELEN")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "KONTINENTALSOKKELEN",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
COUNTYS = c("AKERSHUS", "FINNMARK", "ROGALAND")   # replace with names of "fylker" you are interested in
stations <- unnest(raw_stations$data, cols='id') |>
dplyr::select(id, validFrom, country, county, municipality, name, masl, `@type`) |>
mutate(validFrom=as.Date(validFrom)) |>
filter(`@type` == "SensorSystem" & validFrom <= "1950-01-01" & country == "Norge" & county %in% COUNTYS)
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "ROGALAND",][1:3,],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
col3 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[3])))
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
col5 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[5])))
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "ROGALAND",][c(1, 4, 5),],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
col5 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[5])))
# 3 5
cut_stations <- rbind(
stations[stations$county == "AKERSHUS",][1:2,],
stations[stations$county == "ROGALAND",][c(1, 6, 5),],
stations[stations$county == "FINNMARK",][1:3,]
)
cut_stations
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
start_date <- c(
dc_stations$Date[1],
col1$Date[1],
col2$Date[1],
col3$Date[1],
col4$Date[1],
col5$Date[1],
col6$Date[1],
col7$Date[1],
col8$Date[1]
)
start_date
max(start_date)
dc_stations <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[1]))) %>%
rename(!!paste("Temp", cut_stations$name[1], sep=".") := "Temp")
for (i in 2:8) {
dc_stations[paste("Temp", cut_stations$name[i], sep=".")] <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i])))$Temp
}
head(dc_stations)
autoplot(dc_stations)
autoplot(dc_stations, .vars = c("Temp.ASKER"))
head(dc_stations)
autoplot(dc_stations, .vars = "Temp.ASKER")
autoplot(dc_stations)
dc_stations %>%
ggplot(aes(Date, Temp.ASKER)) +
geom_line()
dc_stations %>%
ggplot() +
geom_line(aes(Date, Temp.ASKER)) +
geom_line(aes(Date, Temp.ÅS))
dc_stations %>%
ggplot(x = Date) +
geom_line(aes(y = Temp.ASKER)) +
geom_line(aes(y = Temp.ÅS))
dc_stations %>%
ggplot(Date) +
geom_line(aes(y = Temp.ASKER)) +
geom_line(aes(y = Temp.ÅS))
dc_stations %>%
ggplot(aes(Date)) +
geom_line(aes(y = Temp.ASKER)) +
geom_line(aes(y = Temp.ÅS))
dc_stations %>%
ggplot(aes(Date)) +
geom_line(aes(y = Temp.ASKER), color = "red") +
geom_line(aes(y = Temp.ÅS), color = "green")
identical(dc_stations$Temp.ASKER, dc_stations$Temp.ÅS)
get_dc_from_frost <- function(sources, frost = TRUE) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = frost #file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
get_dc_from_frost <- function(sources, frost = TRUE) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = frost #file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- tsibble()
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
station_list <- c()
for (i in 1:8) {
station_list <- c(station_list, timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i], FALSE))))
}
col2 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[2], FALSE)))
get_dc_from_frost <- function(sources, frost = TRUE) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = frost #file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- tsibble(Date = date())
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
get_dc_from_frost <- function(sources, frost = TRUE) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = frost #file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- list()
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
col2 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[2], FALSE)))
station_list <- c()
for (i in 1:8) {
station_list <- c(station_list, timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i]), FALSE)))
}
start_date <- c()
for (df in station_list) {
start_date <- c(start_date, df$Date[1])
}
get_dc_from_frost <- function(sources, frost = TRUE) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = !file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- list()
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
get_dc_from_frost <- function(sources) {
# Set this to TRUE to generate a json file
weather_file = paste(sources, "_weather_data_json.rds.bz2", sep="")
get_data_from_frost = !file.exists(file = weather_file)
sources <- sources
.query_url <- str_glue("https://{.client_id}@{server}/{resource}?sources={sources}&referencetime={reference_time}&elements={elements}&timeoffsets={timeoffsets}")
raw_data <- list()
if ( get_data_from_frost ) {
raw_data <- try(fromJSON(URLencode(.query_url), flatten=TRUE))
if (class(raw_data) != 'try-error') {
print("Data retrieved from frost.met.no!")
write_rds(raw_data, weather_file, compress="bz2", text=TRUE)  # JSON represents data as text
print(str_glue("Raw data (JSON) written to '{weather_file}'"))
} else {
print("Error: the data retrieval was not successful!")
}
} else {
raw_data <- read_rds(weather_file)
print(str_glue("Raw data (JSON) read from '{weather_file}'"))
}
df <- unnest(raw_data$data, cols = c(observations))
df |> dplyr::select(referenceTime, value) |>
mutate(referenceTime=as.Date(referenceTime)) |>
rename(Date=referenceTime, Temp=value) |>
as_tsibble(index = Date) -> dc
return(dc)
}
col2 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[2])))
col3 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[3])))
col4 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[4])))
col5 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[5])))
col6 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[6])))
col7 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[7])))
col8 <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[8])))
start_date <- c(
dc_stations$Date[1],
col1$Date[1],
col2$Date[1],
col3$Date[1],
col4$Date[1],
col5$Date[1],
col6$Date[1],
col7$Date[1],
col8$Date[1]
)
start_date
max(start_date)
head(dc_stations)
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
xcor()
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
xcorr()
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
ccf()
head(dc_stations)
cor(dc_stations)
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
cor()
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
head()
head(dc_stations)
dc_stations %>%
dplyr::select(-"Date") %>%
head()
head(dc_stations)
dc_stations %>%
dplyr::select(-1) %>%
head()
head(dc_stations)
head(dc_stations[,-"Date"])
head(dc_stations)
dc_stations %>%
dplyr::select(-c("Date")) %>%
head()
head(dc_stations)
dc_stations %>%
subset(select = -c(Date)) %>%
head()
head(dc_stations)
dc_stations %>%
subset(select = -c(Date)) %>%
cor()
head(dc_stations)
dc_stations %>%
subset(select = -c(Date)) %>%
cor() %>%
data.frame()
dc_stl <- stl(ts(dc_stations$Temp.ASKER, frequency = 365), s.window=7, t.window=5, robust=FALSE)
autoplot(dc_stl)
for (colname in colnames(subset(select = -c(Date)))) {
colname
}
for (colname in colnames(subset(dc_stations, select = -c(Date)))) {
colname
}
# dc_stl <- stl(ts(dc_stations$Temp.ASKER, frequency = 365), s.window=7, t.window=5, robust=FALSE)
# autoplot(dc_stl)
for (colname in colnames(subset(dc_stations, select = -c(Date)))) {
print(colname)
}
# dc_stl <- stl(ts(dc_stations$Temp.ASKER, frequency = 365), s.window=7, t.window=5, robust=FALSE)
# autoplot(dc_stl)
for (colname in colnames(subset(dc_stations, select = -c(Date)))) {
print(colname)
head(dc_stations${{colname}})
for (colname in colnames(subset(dc_stations, select = -c(Date)))) {
dc_stl <- stl(ts(dc_stations[[colname]], frequency = 365), s.window=7, t.window=5, robust=FALSE)
autoplot(dc_stl)
}
dc_stl <- stl(ts(dc_stations$Temp.ASKER, frequency = 365), s.window=7, t.window=5, robust=FALSE)
autoplot(dc_stl)
for (colname in colnames(dc_stations)) {
dc_stl <- stl(ts(dc_stations$Temp.ASKER, frequency = 365), s.window=7, t.window=5, robust=TRUE)
autoplot(dc_stl) +
ggtitle(colname)
}
p_list <- list()
for (colname in colnames(dc_stations)) {
dc_stl <- stl(ts(dc_stations[[colname]], frequency = 365), s.window=7, t.window=5, robust=TRUE)
pl <- autoplot(dc_stl) +
ggtitle(colname)
p_list[[colname]] <- pl
}
p_list$Temp.ASKER
p_list$Temp.ÅS
p_list$`Temp.STAVANGER - VÅLAND`
p_list$Temp.SAUDA
timeseries_cleaner <- function(table) {
gaps <- count_gaps(table)
cutoff_date <-  as.character(tail(gaps[gaps$.n >= 31,], n=1)$.to)
dc_cut <- table %>% tsibble::filter_index(cutoff_date ~ .)
dc_cut_filled_imp <- imputeTS::na_ma(dc_cut_filled, k = 4, weighting = "simple")
dc_cut_filled_imp_noLeap <- dc_cut_filled_imp %>%
dplyr::filter(!(month(Date) == 2 & day(Date) == 29))
return(dc_cut_filled_imp_noLeap)
}
timeseries_cleaner <- function(table) {
gaps <- count_gaps(table)
cutoff_date <-  as.character(tail(gaps[gaps$.n >= 31,], n=1)$.to)
dc_cut <- table %>% tsibble::filter_index(cutoff_date ~ .)
dc_cut_filled_imp <- imputeTS::na_ma(dc_cut_filled, k = 4, weighting = "simple")
dc_cut_filled_imp_noLeap <- dc_cut_filled_imp %>%
dplyr::filter(!(month(Date) == 2 & day(Date) == 29))
return(dc_cut_filled_imp_noLeap)
}
dc_stations <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[1]))) %>%
rename(!!paste("Temp", cut_stations$name[1], sep=".") := "Temp")
for (i in 2:8) {
dc_stations[paste("Temp", cut_stations$name[i], sep=".")] <- timeseries_cleaner(get_dc_from_frost(as.character(cut_stations$id[i])))$Temp
}
head(dc_stations)
identical(dc_stations$Temp.ASKER, dc_stations$Temp.ÅS)
mts_pca <- dc_stations %>%
subset(select = -c(Date)) %>%
prcomp()
data.frame(date = dc_stations$Date, mts_pca$x) %>%
pivot_longer(!timedate, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  timedate, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date, mts_pca$x) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
plot(mts_pca, style = "l")
plot(mts_pca, type = "l")
data.frame(date = dc_stations$Date, mts_pca$x[1:100,]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date, mts_pca$x[,1:100]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date, mts_pca$x[1:100,]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date, mts_pca$x[1:20,]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
data.frame(date = dc_stations$Date[1:100], mts_pca$x[1:100,]) %>%
pivot_longer(!date, names_to="Features", values_to="Scores") %>%
ggplot(aes(x =  date, y = Scores, col = Features)) +
geom_line() +
theme_minimal() +
facet_wrap(~ Features, scales = "free_y", ncol = 3)
