# Load necessary libraries
library(readr)
library(dplyr)
library(ggplot2)
library(caret)
library(glmnet)
library(fastDummies)
# (a) Import the dataset and explore
weather_data <- read_csv("weatherHistory.csv")
# Check the structure of the dataset
str(weather_data)
# Visualizations (optional)
ggplot(weather_data, aes(x = Summary)) + 
  geom_bar() + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(weather_data, aes(x = `Temperature (C)`)) + 
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = 'blue', alpha = 0.7) + 
  geom_density(color = 'red') + 
  labs(title = "Histogram with Density Plot", x = "Temperature (C)", y = "Density")
# (b) Preprocessing
# One-hot encoding for categorical variables
weather_encoded <- dummy_cols(weather_data, select_columns = c('Summary', 'Precip Type'), remove_first_dummy = TRUE)
# Scale numerical features
num_cols <- sapply(weather_encoded, is.numeric)
weather_encoded[num_cols] <- scale(weather_encoded[num_cols])
# Train-test split (75% train, 25% test)
set.seed(123)
train_indices <- sample(1:nrow(weather_encoded), size = 0.75 * nrow(weather_encoded))
train_data <- weather_encoded[train_indices, ]
test_data <- weather_encoded[-train_indices, ]
# (c) Train a linear regression model
# Remove single-level factors
train_data <- train_data[, sapply(train_data, function(x) length(unique(x)) > 1)]
test_data <- test_data[, colnames(test_data) %in% colnames(train_data)]
# Define target and predictors
target <- train_data$`Apparent Temperature (C)`
predictors <- as.matrix(train_data[, -which(names(train_data) == "Apparent Temperature (C)")])
# Use glmnet for linear regression
model <- glmnet(predictors, target)
# Predict on test set
test_target <- test_data$`Apparent Temperature (C)`
test_predictors <- as.matrix(test_data[, -which(names(test_data) == "Apparent Temperature (C)")])
predictions <- predict(model, newx = test_predictors)
# Calculate RMSE, MAE, R2
RMSE <- sqrt(mean((predictions - test_target)^2))
MAE <- mean(abs(predictions - test_target))
R2 <- 1 - (sum((test_target - predictions)^2) / sum((test_target - mean(test_target))^2))
# Print metrics
cat("RMSE:", RMSE, "\n")
cat("MAE:", MAE, "\n")
cat("R2:", R2, "\n")
# Interpret the model parameters (coefficients)
print(coef(model))
q()
