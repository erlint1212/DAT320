library(readr)
library(dplyr)
library(ggplot2)
library(caret)
library(glmnet)
library(fastDummies)
# (a) Explanation of Linear Regression Assumptions
# 1. Linearity: The relationship between X and Y is linear.
# 2. Homoscedasticity: Residuals have constant variance.
# 3. Independence: Residuals are independent.
# 4. Normality: Residuals are normally distributed.
# (b) Function to plot diagnostic plots
generate_diagnostic_plots <- function(model) {
  par(mfrow = c(2, 2))
  plot(model, which = 1)  # Residuals vs Fitted
  plot(model, which = 2)  # Normal Q-Q
  plot(model, which = 3)  # Scale-Location
  plot(model, which = 5)  # Residuals vs Leverage
  par(mfrow = c(1, 1))    # Reset plotting area
}
# (c) Data Generation
# Set seed for reproducibility
set.seed(42)
n <- 1000
x <- 1:n
# Generate data that holds to all assumptions
y_holds <- 5 + 2 * x + rnorm(n, mean = 0, sd = 1) 
# Generate data that breaks the assumption of Homoscedasticity
y_homoscedasticity <- 5 + 2 * x + rnorm(n, mean = 0, sd = x)
# Generate data that breaks the assumption of Linearity
y_nonlinear <- 5 + 2 * x^2 + rnorm(n, mean = 0, sd = 1)
# Generate data that breaks the assumption of Normality
y_non_normal <- 5 + 2 * x + rexp(n, rate = 1)
# Create a function to plot data
plot_data <- function(x, y, title) {
  ggplot(data.frame(x, y), aes(x, y)) + 
    geom_point(size = 0.5) + 
    geom_smooth(method = "lm", color = "blue", se = FALSE) + 
    ggtitle(title) + 
    theme_minimal()
}
# Plot all datasets
par(mfrow = c(2, 2))
# Data Meeting All Assumptions
plot_data(x, y_holds, "Data Meeting All Assumptions")
# Data Breaking Homoscedasticity
plot_data(x, y_homoscedasticity, "Data Breaking Homoscedasticity")
# Data Breaking Linearity
plot_data(x, y_nonlinear, "Data Breaking Linearity")
# Data Breaking Normality
plot_data(x, y_non_normal, "Data Breaking Normality")
# Reset plotting area
par(mfrow = c(1, 1))
# (d) Diagnostic Plots for Data Meeting All Assumptions
lm_holds <- lm(y_holds ~ x)
generate_diagnostic_plots(lm_holds)
# Diagnostic Plots for Data Breaking Homoscedasticity
lm_homoscedasticity <- lm(y_homoscedasticity ~ x)
generate_diagnostic_plots(lm_homoscedasticity)
# Diagnostic Plots for Data Breaking Linearity
lm_nonlinear <- lm(y_nonlinear ~ x)
generate_diagnostic_plots(lm_nonlinear)
# Diagnostic Plots for Data Breaking Normality
lm_non_normal <- lm(y_non_normal ~ x)
generate_diagnostic_plots(lm_non_normal)
q()
